name: "Pull request checks"

on:
  pull_request:
    branches:
      - develop
      - main
permissions:
  id-token: write
  packages: write
  contents: write
  pull-requests: write
jobs:
  get-gh-env:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.get-gh-env.outputs.env }}
    steps:
      - name: Get PR number
        id: get_pr_number
        run: echo "::set-output name=pr_number::${{ github.event.number }}"

      - name: Get PR branch
        id: get_pr_branch
        run: echo "::set-output name=pr_branch::${{ github.event.pull_request.base.ref }}"

      - name: Set environment
        id: set_env
        run: |
          if [[ ${{ steps.get_pr_branch.outputs.pr_branch }} == "main" ]]; then
            echo "env=PROD" >> $GITHUB_ENV
          else
            echo "env=DEV" >> $GITHUB_ENV
          fi

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: dockerlint
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: './itu-minitwit-golang/Dockerfile'


      - name: shellcheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: -e SC2086

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: golint
        uses: golangci/golangci-lint-action@v6
        with:
          working-directory: ./itu-minitwit-golang
          version: 'v1.64.5'

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: ./run_tests.sh

  terraform-check:
    runs-on: ubuntu-latest
    environment: ${{ needs.get-gh-env.outputs.env }}
    env:
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      ip_address: ${{ steps.get-vm-ip.outputs.ip_address }}
    defaults:
      run:
        working-directory: ./itu-minitwit-golang/deployments/terraform/infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Init tflint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run tflint
        run: tflint -f compact

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      - name: Terraform validate infrastructure
        run: terraform validate

      - name: Terraform plan infrastructure
        run: |
          terraform plan \
            -var="do_token=${{ secrets.DIGITAL_OCEAN_API_KEY }}" \
            -var="do_ssh_key_name=${{ secrets.DIGITAL_OCEAN_SSH_KEY_NAME }}" \
            -var="api_user=${{ secrets.API_USER }}" \
            -var="api_password=${{ secrets.API_PASSWORD }}" \
            -var="db_name=${{ vars.DB_NAME }}" \
            -var="prometheus_root_password=${{ secrets.PROMETHEUS_ROOT_PASSWORD }}" \
            -var="helge_and_mircea_password=${{ secrets.HELGE_AND_MIRCEA_PASSWORD }}"
      - name: Get VM IP address
        id: get-vm-ip
        run: |
          ip_address=$(terraform output -raw ip_address)
          echo "ip_address=$ip_address" >> $GITHUB_OUTPUT

  terraform-check-obsevability:
    runs-on: ubuntu-latest
    environment: ${{ needs.get-gh-env.outputs.env }}
    needs: terraform-check
    env:
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./itu-minitwit-golang/deployments/terraform/observability

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      - name: Terraform validate observability
        run: terraform validate

      - name: Terraform plan observability
        run: |
          terraform plan \
            -var="vm_ip_address=${{ needs.terraform-check.outputs.ip_address }}" \
            -var="grafana_root_password=${{ secrets.GRAFANA_ROOT_PASSWORD }}" \
            -var="prometheus_root_password=${{ secrets.PROMETHEUS_ROOT_PASSWORD }}" \
            -var="helge_and_mircea_password=${{ secrets.HELGE_AND_MIRCEA_PASSWORD }}"
