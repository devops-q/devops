name: "Build and deploy"

on:
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write
  packages: write
  contents: write
  pull-requests: write

jobs:
  get-env:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        id: set-env
        run: echo "env=$(if [ ${{ github.ref }} == 'refs/heads/main' ]; then echo 'PROD'; else echo 'DEV'; fi)" >> $GITHUB_ENV
    outputs:
      env: ${{ env.env }}
  build:
    runs-on: ubuntu-latest
    needs:
      - get-env
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short SHA or matching commit hash
        id: get_sha
        run: |
          if [ "${{ needs.get-env.outputs.env }}" == "DEV" ]; then
            short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          else
            git fetch origin develop
            latest_commit=$(git log -1 --pretty=format:"%H" origin/develop)
            short_sha=$(echo $latest_commit | cut -c1-7)
          fi
          echo "short_sha=$short_sha" >> $GITHUB_ENV
      - name: Log in to GitHub Docker registry
        if: ${{ needs.get-env.outputs.env == 'DEV' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: ${{ needs.get-env.outputs.env == 'DEV' }}
        uses: docker/build-push-action@v6
        with:
          context: ./itu-minitwit-golang
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/itu-minitwit-golang:${{ env.short_sha }}
    outputs:
      short_sha: ${{ env.short_sha }}
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - get-env
    environment: ${{ needs.get-env.outputs.env }}
    env:
      PROMETHEUS_ROOT_PASSWORD: ${{ secrets.PROMETHEUS_ROOT_PASSWORD }}
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./itu-minitwit-golang
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init infrastructure
        run: terraform init
        working-directory: ./itu-minitwit-golang/deployments/terraform/infrastructure

      - name: Terraform apply infrastructure
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DIGITAL_OCEAN_API_KEY }}" \
            -var="do_ssh_key_name=${{ secrets.DIGITAL_OCEAN_SSH_KEY_NAME }}" \
            -var="db_name=${{ vars.DB_NAME }}"
          
          ip_address=$(terraform output -raw ip_address)
          db_host=$(terraform output -raw db_private_host)
          db_port=$(terraform output -raw db_port)
          db_user=$(terraform output -raw db_user)
          db_password=$(terraform output -raw db_password)
          
          echo "::add-mask::$db_password" # Mask the password
          
          echo "ip_address=$ip_address" >> $GITHUB_ENV
          echo "db_host=$db_host" >> $GITHUB_ENV
          echo "db_port=$db_port" >> $GITHUB_ENV
          echo "db_user=$db_user" >> $GITHUB_ENV
          echo "db_password=$db_password" >> $GITHUB_ENV
        working-directory: ./itu-minitwit-golang/deployments/terraform/infrastructure

      - name: Ansible Setup
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./id_rsa
          chmod 600 ./id_rsa

          sleep 10
          scp -o StrictHostKeyChecking=no -i ./id_rsa -r vm_config "root@${{ env.ip_address }}":/tmp/vm_config

          scp -o StrictHostKeyChecking=no -i ./id_rsa playbook.yml "root@${{ env.ip_address }}":/tmp/
          ssh -o StrictHostKeyChecking=no -i ./id_rsa "root@${{ env.ip_address }}" << EOF
          ansible-playbook /tmp/playbook.yml -c local \
          -e "PROMETHEUS_ROOT_PASSWORD=${{ secrets.PROMETHEUS_ROOT_PASSWORD }}" \
          -e "HELGE_AND_MIRCEA_PASSWORD=${{ secrets.HELGE_AND_MIRCEA_PASSWORD }}" \
          -e "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" \
          -e "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" \
          -e "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}"
          EOF

      - name: Check user_data script completion
        working-directory: ./scripts
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./id_rsa
          chmod 600 ./id_rsa

          sleep 10
          
          scp -o StrictHostKeyChecking=no -i ./id_rsa check_user_data_completion.sh "root@${{ env.ip_address }}":/tmp/
          ssh -o StrictHostKeyChecking=no -i ./id_rsa "root@${{ env.ip_address }}" "bash /tmp/check_user_data_completion.sh"

      - name: Log in to GitHub Docker registry
        if: ${{ needs.get-env.outputs.env == 'DEV' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create env file
        run: |
          echo "DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/itu-minitwit-golang:${{ needs.build.outputs.short_sha }}" > ./envfile
          echo "DB_HOST=${{ env.db_host }}" >> ./envfile
          echo "DB_USER=${{ env.db_user }}" >> ./envfile
          echo "DB_PASSWORD=${{ env.db_password }}" >> ./envfile
          echo "DB_NAME=${{ vars.DB_NAME }}" >> ./envfile
          echo "DB_PORT=${{ env.db_port }}" >> ./envfile
          echo "GRAFANA_ROOT_PASSWORD=${{ secrets.GRAFANA_ROOT_PASSWORD }}" >> ./envfile
          echo "INITIAL_API_USER=${{ secrets.API_USER }}" >> ./envfile
          echo "INITIAL_API_PASSWORD=${{ secrets.API_PASSWORD }}" >> ./envfile
      - name: Docker Stack Deploy
        uses: cssnr/stack-deploy-action@v1
        with:
          name: itu-minitwit
          file: ./itu-minitwit-golang/docker-compose.yml
          host: ${{ env.ip_address }}
          user: root
          ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          env_file: ./itu-minitwit-golang/envfile
      - name: Terraform init observability
        run: terraform init
        working-directory: ./itu-minitwit-golang/deployments/terraform/observability

      - name: Terraform apply observability
        run: |
          terraform apply -auto-approve \
             -var="vm_ip_address=${{ env.ip_address }}" \
             -var="grafana_root_password=${{ secrets.GRAFANA_ROOT_PASSWORD }}" \
             -var="prometheus_root_password=${{ secrets.PROMETHEUS_ROOT_PASSWORD }}" \
             -var="helge_and_mircea_password=${{ secrets.HELGE_AND_MIRCEA_PASSWORD }}"
        working-directory: ./itu-minitwit-golang/deployments/terraform/observability

  create-release:
    runs-on: ubuntu-latest
    needs:
      - deploy
      - get-env
    if: ${{ needs.get-env.outputs.env == 'PROD' }}
    steps:
      - uses: actions/checkout@v3
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Release ${{ github.sha }}



