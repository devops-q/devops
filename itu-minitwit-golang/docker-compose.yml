services:
  traefik:
    image: traefik:v3.1
    command:
      - "--log.level=DEBUG"
      - "--providers.swarm"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=phbl@itu.dk"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - minitwit-network
    deploy:
      labels:
        - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"



  app:
    image: ${DOCKER_IMAGE}
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - GIN_MODE=release
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - DB_SSL_MODE=require
      - INITIAL_API_USER=${INITIAL_API_USER}
      - INITIAL_API_PASSWORD=${INITIAL_API_PASSWORD}

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - minitwit-network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=minitwit-network"
        - "traefik.http.routers.app.rule=Host(`${HOST}`) && Path(`/metrics`)"
        - "traefik.http.routers.app.entrypoints=websecure"
        - "traefik.http.routers.app.tls.certresolver=myresolver"
        - "traefik.http.services.app.loadbalancer.server.port=8080"
        - "traefik.http.routers.app-ip.rule=Host(`${IP_ADDRESS}`)"
        - "traefik.http.routers.app-ip.entrypoints=web"
        - "traefik.http.services.app-ip.loadbalancer.server.port=8080"
        - "traefik.http.routers.app.service=app"
        - "traefik.http.routers.app-ip.service=app-ip"
      replicas: 3
      update_config:
        order: start-first
        parallelism: 1

  prometheus:
    image: prom/prometheus
    user: "1000:1000"
    volumes:
      - type: bind
        source: /mnt/mount/config/prom
        target: /etc/prometheus/
        consistency: consistent
      - type: bind
        source: /mnt/mount/prom
        target: /prometheus
        consistency: consistent
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    environment:
      - PROMETHEUS_ROOT_PASSWORD_BCRYPT=${PROMETHEUS_ROOT_PASSWORD_BCRYPT}
      - HELGE_AND_MIRCEA_PASSWORD_BCRYPT=${HELGE_AND_MIRCEA_PASSWORD_BCRYPT}
    networks:
      - minitwit-network
  grafana:
    image: grafana/grafana:11.5.2
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ROOT_PASSWORD}
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      - loki
    networks:
      - minitwit-network


  loki:
    image: grafana/loki:2.9.13
    volumes:
      - type: bind
        source: /mnt/mount/config/loki-config.yaml
        target: /etc/loki/loki-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    hostname: loki
    networks:
      - minitwit-network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=minitwit-network"
        - "traefik.http.routers.loki.rule=Host(`loki.${HOST}`)"
        - "traefik.http.routers.loki.entrypoints=websecure"
        - "traefik.http.routers.loki.tls.certresolver=myresolver"
        - "traefik.http.services.loki.loadbalancer.server.port=3100"
        - "traefik.http.routers.loki.middlewares=test-auth"
  alloy:
    image: grafana/alloy:v1.7.5
    volumes:
      - type: bind
        source: /mnt/mount/config/alloy-config.alloy
        target: /etc/alloy/config.river
      - /var/run/docker.sock:/var/run/docker.sock
      - alloy-data:/var/lib/alloy

    command: run --server.http.listen-addr=0.0.0.0:12345 /etc/alloy/config.river
    depends_on:
      - loki
    networks:
      - minitwit-network


volumes:
  grafana-storage:
  loki-data:
  alloy-data:
  letsencrypt:


networks:
  minitwit-network:
    driver: overlay
    attachable: true